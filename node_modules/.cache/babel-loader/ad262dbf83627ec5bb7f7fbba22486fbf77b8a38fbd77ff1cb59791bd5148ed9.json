{"ast":null,"code":"/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://localhost:5027/api/tasks\"; // Update with your backend URL\r\n\r\nconst ToDoWrapper = () => {\r\n  const [todos, setTodos] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await axios.get(API_URL);\r\n        setTodos(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  const addTodo = async (todo) => {\r\n    try {\r\n      const response = await axios.post(API_URL, todo);\r\n      setTodos([...todos, response.data]);\r\n    } catch (error) {\r\n      console.error(\"Error adding task:\", error);\r\n    }\r\n  };\r\n\r\n  const toggleComplete = async (id) => {\r\n    const todoToToggle = todos.find((todo) => todo.id === id);\r\n    if (todoToToggle) {\r\n      const updatedTodo = {\r\n        ...todoToToggle,\r\n        isCompleted: !todoToToggle.isCompleted,\r\n      };\r\n      try {\r\n        await axios.put(`${API_URL}/${id}`, updatedTodo);\r\n        setTodos(\r\n          todos.map((todo) =>\r\n            todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo\r\n          )\r\n        );\r\n      } catch (error) {\r\n        console.error(\"Error updating task:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteTodo = async (id) => {\r\n    try {\r\n      await axios.delete(`${API_URL}/${id}`);\r\n      setTodos(todos.filter((todo) => todo.id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  const editTodo = (id) => {\r\n    setTodos(\r\n      todos.map((todo) =>\r\n        todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\r\n      )\r\n    );\r\n  };\r\n\r\n  const editTask = async ({ name, deadline, id }) => {\r\n    try {\r\n      const updatedTask = { name, deadline, id, isCompleted: false };\r\n      await axios.put(`${API_URL}/${id}`, updatedTask);\r\n      setTodos(\r\n        todos.map((todo) =>\r\n          todo.id === id\r\n            ? { ...todo, name, deadline, isEditing: !todo.isEditing }\r\n            : todo\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error editing task:\", error);\r\n    }\r\n  };\r\n\r\n  const filteredTodos = () => {\r\n    switch (filter) {\r\n      case \"completed\":\r\n        return todos.filter((todo) => todo.isCompleted);\r\n      case \"incomplete\":\r\n        return todos.filter((todo) => !todo.isCompleted);\r\n      default:\r\n        return todos;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"TodoWrapper\">\r\n      <h1>Get Things Done!</h1>\r\n      <TodoForm addTodo={addTodo} />\r\n      <div className=\"filters\">\r\n        <button onClick={() => setFilter(\"all\")}>All</button>\r\n        <button onClick={() => setFilter(\"completed\")}>Completed</button>\r\n        <button onClick={() => setFilter(\"incomplete\")}>Incomplete</button>\r\n      </div>\r\n      <table className=\"todo-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Task</th>\r\n            <th>Deadline</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredTodos().map((todo) =>\r\n            todo.isEditing ? (\r\n              <EditTodoForm editTodo={editTask} task={todo} key={todo.id} />\r\n            ) : (\r\n              <Todo\r\n                task={todo}\r\n                key={todo.id}\r\n                toggleComplete={toggleComplete}\r\n                deleteTodo={deleteTodo}\r\n                editTodo={editTodo}\r\n              />\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoWrapper;\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://localhost:5027/api/tasks\";\r\n\r\nconst TodoWrapper = () => {\r\n  const [todos, setTodos] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await axios.get(API_URL);\r\n        setTodos(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  const addTodo = async (todo) => {\r\n    try {\r\n      const response = await axios.post(API_URL, todo);\r\n      setTodos([...todos, response.data]);\r\n    } catch (error) {\r\n      console.error(\"Error adding task:\", error);\r\n    }\r\n  };\r\n\r\n  const toggleComplete = async (id) => {\r\n    const todoToToggle = todos.find((todo) => todo.id === id);\r\n    if (todoToToggle) {\r\n      const updatedTodo = {\r\n        ...todoToToggle,\r\n        isCompleted: !todoToToggle.isCompleted,\r\n      };\r\n      try {\r\n        await axios.put(`${API_URL}/${id}`, updatedTodo);\r\n        setTodos(\r\n          todos.map((todo) =>\r\n            todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo\r\n          )\r\n        );\r\n      } catch (error) {\r\n        console.error(\"Error updating task:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteTodo = async (id) => {\r\n    try {\r\n      await axios.delete(`${API_URL}/${id}`);\r\n      setTodos(todos.filter((todo) => todo.id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  const editTodo = (id) => {\r\n    setTodos(\r\n      todos.map((todo) =>\r\n        todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\r\n      )\r\n    );\r\n  };\r\n\r\n  const editTask = async ({ name, deadline, id }) => {\r\n    try {\r\n      const updatedTask = { name, deadline, id, isCompleted: false };\r\n      await axios.put(`${API_URL}/${id}`, updatedTask);\r\n      setTodos(\r\n        todos.map((todo) =>\r\n          todo.id === id\r\n            ? { ...todo, name, deadline, isEditing: !todo.isEditing }\r\n            : todo\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error editing task:\", error);\r\n    }\r\n  };\r\n\r\n  const filteredTodos = () => {\r\n    switch (filter) {\r\n      case \"completed\":\r\n        return todos.filter((todo) => todo.isCompleted);\r\n      case \"incomplete\":\r\n        return todos.filter((todo) => !todo.isCompleted);\r\n      default:\r\n        return todos;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"TodoWrapper\">\r\n      <h1>Get Things Done!</h1>\r\n      <TodoForm addTodo={addTodo} />\r\n      <div className=\"filters\">\r\n        <button onClick={() => setFilter(\"all\")}>All</button>\r\n        <button onClick={() => setFilter(\"completed\")}>Completed</button>\r\n        <button onClick={() => setFilter(\"incomplete\")}>Incomplete</button>\r\n      </div>\r\n      <table className=\"todo-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Task</th>\r\n            <th>Deadline</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredTodos().map((todo) =>\r\n            todo.isEditing ? (\r\n              <EditTodoForm editTodo={editTask} task={todo} key={todo.id} />\r\n            ) : (\r\n              <Todo\r\n                task={todo}\r\n                key={todo.id}\r\n                toggleComplete={toggleComplete}\r\n                deleteTodo={deleteTodo}\r\n                editTodo={editTodo}\r\n              />\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoWrapper;\r\n*/","map":{"version":3,"names":[],"sources":["C:/Users/Dell/todo_list/src/components/ToDoWrapper.js"],"sourcesContent":["/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://localhost:5027/api/tasks\"; // Update with your backend URL\r\n\r\nconst ToDoWrapper = () => {\r\n  const [todos, setTodos] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await axios.get(API_URL);\r\n        setTodos(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  const addTodo = async (todo) => {\r\n    try {\r\n      const response = await axios.post(API_URL, todo);\r\n      setTodos([...todos, response.data]);\r\n    } catch (error) {\r\n      console.error(\"Error adding task:\", error);\r\n    }\r\n  };\r\n\r\n  const toggleComplete = async (id) => {\r\n    const todoToToggle = todos.find((todo) => todo.id === id);\r\n    if (todoToToggle) {\r\n      const updatedTodo = {\r\n        ...todoToToggle,\r\n        isCompleted: !todoToToggle.isCompleted,\r\n      };\r\n      try {\r\n        await axios.put(`${API_URL}/${id}`, updatedTodo);\r\n        setTodos(\r\n          todos.map((todo) =>\r\n            todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo\r\n          )\r\n        );\r\n      } catch (error) {\r\n        console.error(\"Error updating task:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteTodo = async (id) => {\r\n    try {\r\n      await axios.delete(`${API_URL}/${id}`);\r\n      setTodos(todos.filter((todo) => todo.id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  const editTodo = (id) => {\r\n    setTodos(\r\n      todos.map((todo) =>\r\n        todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\r\n      )\r\n    );\r\n  };\r\n\r\n  const editTask = async ({ name, deadline, id }) => {\r\n    try {\r\n      const updatedTask = { name, deadline, id, isCompleted: false };\r\n      await axios.put(`${API_URL}/${id}`, updatedTask);\r\n      setTodos(\r\n        todos.map((todo) =>\r\n          todo.id === id\r\n            ? { ...todo, name, deadline, isEditing: !todo.isEditing }\r\n            : todo\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error editing task:\", error);\r\n    }\r\n  };\r\n\r\n  const filteredTodos = () => {\r\n    switch (filter) {\r\n      case \"completed\":\r\n        return todos.filter((todo) => todo.isCompleted);\r\n      case \"incomplete\":\r\n        return todos.filter((todo) => !todo.isCompleted);\r\n      default:\r\n        return todos;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"TodoWrapper\">\r\n      <h1>Get Things Done!</h1>\r\n      <TodoForm addTodo={addTodo} />\r\n      <div className=\"filters\">\r\n        <button onClick={() => setFilter(\"all\")}>All</button>\r\n        <button onClick={() => setFilter(\"completed\")}>Completed</button>\r\n        <button onClick={() => setFilter(\"incomplete\")}>Incomplete</button>\r\n      </div>\r\n      <table className=\"todo-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Task</th>\r\n            <th>Deadline</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredTodos().map((todo) =>\r\n            todo.isEditing ? (\r\n              <EditTodoForm editTodo={editTask} task={todo} key={todo.id} />\r\n            ) : (\r\n              <Todo\r\n                task={todo}\r\n                key={todo.id}\r\n                toggleComplete={toggleComplete}\r\n                deleteTodo={deleteTodo}\r\n                editTodo={editTodo}\r\n              />\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoWrapper;\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://localhost:5027/api/tasks\";\r\n\r\nconst TodoWrapper = () => {\r\n  const [todos, setTodos] = useState([]);\r\n  const [filter, setFilter] = useState(\"all\");\r\n\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      try {\r\n        const response = await axios.get(API_URL);\r\n        setTodos(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching tasks:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTodos();\r\n  }, []);\r\n\r\n  const addTodo = async (todo) => {\r\n    try {\r\n      const response = await axios.post(API_URL, todo);\r\n      setTodos([...todos, response.data]);\r\n    } catch (error) {\r\n      console.error(\"Error adding task:\", error);\r\n    }\r\n  };\r\n\r\n  const toggleComplete = async (id) => {\r\n    const todoToToggle = todos.find((todo) => todo.id === id);\r\n    if (todoToToggle) {\r\n      const updatedTodo = {\r\n        ...todoToToggle,\r\n        isCompleted: !todoToToggle.isCompleted,\r\n      };\r\n      try {\r\n        await axios.put(`${API_URL}/${id}`, updatedTodo);\r\n        setTodos(\r\n          todos.map((todo) =>\r\n            todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo\r\n          )\r\n        );\r\n      } catch (error) {\r\n        console.error(\"Error updating task:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteTodo = async (id) => {\r\n    try {\r\n      await axios.delete(`${API_URL}/${id}`);\r\n      setTodos(todos.filter((todo) => todo.id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  const editTodo = (id) => {\r\n    setTodos(\r\n      todos.map((todo) =>\r\n        todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\r\n      )\r\n    );\r\n  };\r\n\r\n  const editTask = async ({ name, deadline, id }) => {\r\n    try {\r\n      const updatedTask = { name, deadline, id, isCompleted: false };\r\n      await axios.put(`${API_URL}/${id}`, updatedTask);\r\n      setTodos(\r\n        todos.map((todo) =>\r\n          todo.id === id\r\n            ? { ...todo, name, deadline, isEditing: !todo.isEditing }\r\n            : todo\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error editing task:\", error);\r\n    }\r\n  };\r\n\r\n  const filteredTodos = () => {\r\n    switch (filter) {\r\n      case \"completed\":\r\n        return todos.filter((todo) => todo.isCompleted);\r\n      case \"incomplete\":\r\n        return todos.filter((todo) => !todo.isCompleted);\r\n      default:\r\n        return todos;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"TodoWrapper\">\r\n      <h1>Get Things Done!</h1>\r\n      <TodoForm addTodo={addTodo} />\r\n      <div className=\"filters\">\r\n        <button onClick={() => setFilter(\"all\")}>All</button>\r\n        <button onClick={() => setFilter(\"completed\")}>Completed</button>\r\n        <button onClick={() => setFilter(\"incomplete\")}>Incomplete</button>\r\n      </div>\r\n      <table className=\"todo-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Task</th>\r\n            <th>Deadline</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredTodos().map((todo) =>\r\n            todo.isEditing ? (\r\n              <EditTodoForm editTodo={editTask} task={todo} key={todo.id} />\r\n            ) : (\r\n              <Todo\r\n                task={todo}\r\n                key={todo.id}\r\n                toggleComplete={toggleComplete}\r\n                deleteTodo={deleteTodo}\r\n                editTodo={editTodo}\r\n              />\r\n            )\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoWrapper;\r\n*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}